= Surrey Rubyists Coding Competition: Hangman

== Player Class

All you need to do is create a single file and implements a hangman player with the below methods. 

You should place your player file inside the "players" folder within the hangman game folder.

Your class name must end with "Player" for it to be loaded by the game framework! Please try to make your class 
and file name unique in some way (with your team name for example) to avoid clashes with other players.

  # ./players/my_awesome_super_duper_hangman_player.rb
  class MyAwesomeSuperDuperHangmanPlayer
    def name
      # Return the name of your player (string)
    end

    def new_game(dictionary)
      # A new game has started, do any clean up from a previous game. 
      # The dictionary that was used to select words to generate the phrase to guess is passed in as a string array: ["apple", "bear", "cat"]
    end

    def take_turn(pattern)
      # It's your turn. Return a guess (string) which can either be a letter, word or whole phrase.
      # The current state of your pattern is passed in the format "s_rr__/r____s_s" 
      # The pattern is made up from: underscore = missing letter, forward slash = space, letter = correctly placed
    end

    # If your player needs supporting classes, you can nest them inside your player class.
    # This is to keep things simple for the player loader and also to avoid clashes between players.
    class MySupportingClass
      # ...
    end
  end

== Rules

1. Matches between players will be the best of 3 games.
2. The number of words that make up the missing phrase will increase through the rounds.
3. If your player throws an exception, you lose the game.
4. You cannot try to gain or influence information held in the game runner app or other players.
5. Matches will be 1v1. The winner is the one who finds the missing phrase first or the one that survives longer.
6. Both players will be able to take the same number of turns, therefore no advantage is gained from going first.
7. Draws are possible. In the event of 3 out of 3 draws we will continue into sudden death until one player wins (or we get bored, where we will split up the players).
8. Each turn you must make a guess. Any invalid guess (nil, empty, non-string) will result in an incorrect guess.
9. If the game runner crashes, then a rematch will be played.
10. Your player must decide the guess to make (no human interaction is allowed during the game).

== Running the game

To run the game, open a terminal/command prompt and cd to the hangman folder. Then type the following:

    $ ruby app.rb

This will start up the game and load the valid players from the players folder. You can then select two players 
and start a new game. You can test your player as you develop it with the game runner. There are two sample players
already in the players folder for you to play against while developing your player.

== Sample Players

There are two sample players for you to play against and see how a very basic player works:

=== StupidDemoPlayer

This player will randomly select a letter from the alphabet and return it as it's guess. It will track it's guesses and will not guess the same letter twice in a game.

=== HumanDemoPlayer

This player has no AI, it just allows a human player to enter each guess for it.

== Example game

TBC
